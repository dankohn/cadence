// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// nDCWorkflow is an autogenerated mock type for the nDCWorkflow type
type nDCWorkflow struct {
	mock.Mock
}

// getContext provides a mock function with given fields:
func (_m *nDCWorkflow) getContext() history.workflowExecutionContext {
	ret := _m.Called()

	var r0 history.workflowExecutionContext
	if rf, ok := ret.Get(0).(func() history.workflowExecutionContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(history.workflowExecutionContext)
		}
	}

	return r0
}

// getMutableState provides a mock function with given fields:
func (_m *nDCWorkflow) getMutableState() history.mutableState {
	ret := _m.Called()

	var r0 history.mutableState
	if rf, ok := ret.Get(0).(func() history.mutableState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(history.mutableState)
		}
	}

	return r0
}

// getReleaseFn provides a mock function with given fields:
func (_m *nDCWorkflow) getReleaseFn() history.releaseWorkflowExecutionFunc {
	ret := _m.Called()

	var r0 history.releaseWorkflowExecutionFunc
	if rf, ok := ret.Get(0).(func() history.releaseWorkflowExecutionFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(history.releaseWorkflowExecutionFunc)
		}
	}

	return r0
}

// getVectorClock provides a mock function with given fields:
func (_m *nDCWorkflow) getVectorClock() (int64, int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// happensAfter provides a mock function with given fields: that
func (_m *nDCWorkflow) happensAfter(that history.nDCWorkflow) (bool, error) {
	ret := _m.Called(that)

	var r0 bool
	if rf, ok := ret.Get(0).(func(history.nDCWorkflow) bool); ok {
		r0 = rf(that)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(history.nDCWorkflow) error); ok {
		r1 = rf(that)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// suppressWorkflowBy provides a mock function with given fields: incomingWorkflow
func (_m *nDCWorkflow) suppressWorkflowBy(incomingWorkflow history.nDCWorkflow) error {
	ret := _m.Called(incomingWorkflow)

	var r0 error
	if rf, ok := ret.Get(0).(func(history.nDCWorkflow) error); ok {
		r0 = rf(incomingWorkflow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
